[
  {
    "objectID": "stuff.html",
    "href": "stuff.html",
    "title": "Other stuff I do",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nTwitter\n\n\n\n\n\n\n\n\n\n\n\n\n\nPodcasts\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2021-02-04_Giakoumakis/index.html",
    "href": "posts/2021-02-04_Giakoumakis/index.html",
    "title": "Extraordinary Giakoumakis",
    "section": "",
    "text": "Giakoumakis stays with VVV for at least the rest of the season. He scored 21 goals (6 penalties) already this season. Is he really that good? Let’s find out if a bigger club should go after him this summer.  He had 15 non penalty goals. His shot map looks great. Very few shots from outside the penalty box and a lot of central shots. His NPxG is 8.46, which already shows his overperformance.\n\n\n\n\n Let’s take a closer look at the xG of his chances. I divided his chances in 0.1 xG bins. We see that most of his chances are really small (< 0.1 xG), but he scores relative many of those chances(4 from 36). The same goes for the 0.1-0.2 bin where he scored 4 from 12. What can we do with xPoints and do we need it?\n\n\n\n\n So, how extraordinary is this? I’ve simulated all his non penalty shots a million times to see how much he would score. As we can see, the chance that he scores 15 of them is only a few percent! Scoring only 3 goals is more likely than the 15 he has!\n\n\n\n\n If we look at the minimum number of goals scored in the simulations, we see that he has an almost 50% chance of scoring at least 9 goals. The chance at scoring 11 or more goals is less than 25%\n\n\n\n\nWill he continue this form the rest of the season? Possible, but unlikely. Will he manage this next season as well? Even more unlikely.\nVVV should’ve sold him already in my opinion as they are safe from relegation. Now they should certainly sell him at the end of the season."
  },
  {
    "objectID": "posts/2021-03-03_Expected-points/index.html",
    "href": "posts/2021-03-03_Expected-points/index.html",
    "title": "Expected Points",
    "section": "",
    "text": "This post is about Expected Points\nRead the Dutch version of this article here\nYou probably read already about it, or saw it in some tweet/picture/anything, Expected Points. From understat to Opta, they are all using it. There are some different ways to calculate it though. In this article I will tell you my method, the method we use for our dashboard at Tussen de Linies\n #### XPOINTS? What can we do with xPoints and do we need it?\nWe can use xPoints to see where we may expect a team in the league table. In short: it is a way to show how well they perform this season, looking at their shots.\nRaw xG numbers don’t say everything, as the quality of the chances plays a role as well.\n\nAN EXAMPLE\nLet’s take a look at the game FC Groningen against FC Twente. The game ended in 2-2 with xG 1.9 and 1.5. In the table you’ll see the chances for both teams to win.\n\n\n\nAs you can see, the xG of Groningen is 0.5 higher (almost 36%), but the chance to win is 86% percent higher. The size of the chances is what decides the difference.\n\n\nHOW BIG ARE THE CHANCES?\n\n\n\nBesides the two goals, Groningen has a lot of medium sized chances. Twente has three good chances, but not much else. For getting the chance to win and so the expected points, we will simulate those chances. \n\n\n\nTHE CALCULATION\nFor every shot we draw a random number between 0 and 1. Everytime this number is smaller than the xG of that shot, the shot becomes a goal. After we’ve done this for every shot in the match, we got a number of home- and away goals and so a result (home win/draw/away win). We simulate a match this way for ten thousand times. Each result is stored and after all the simulations we count the number of different results to determine the chance for both teams to win. It’s simple the perentage of simulations resulting in that specific result.\nAfter we have those chances, we multiply the chance to win with 3 and the chance for a draw with 1 for both teams. So: Groningen 49.04% * 3 punten + 24.72% * 1 punt = 1.72\nThose calculations will give us a number of points that we call Expected Points. Doing this for a whole season will give us an Expected Rank. In this match, Groningen didn’t got enough with there 1 real point, but over the whole season they got too many points.\n\n\n\nTHE PROBLEM(S)\nGame state is very much resposible for the way a team acts. If you’re leading by an early goal, the urge to attack fades away. The opponent will attack instead and will get a higher xG with every shot they take. If they don’t score, they keep attacking without scoring. So the xG skews in their favour, even if their chances are poor. Scoring 2 or 3 goals from less than 1 xG in the beginning of the game will also have this result, as the opponent must attack and have a comfortable lead.\nThe experience learns us that over a whole season, xPoints is good in giving us a fair picture about the teams in a competition.\n\n\nHOW DOES X PERFORM OVER TIME?\nIf you want to see a xPoints timeline of you’re favorite Eredivisie team, hit me up on Twitter!"
  },
  {
    "objectID": "other_pages/Shots.html",
    "href": "other_pages/Shots.html",
    "title": "Getting Blue Fingers",
    "section": "",
    "text": "Shots and xG Eredivisie 2022/2023\nTable sorted on NP-Goals and NPxG\n\n\n\n\n\n\n\n\n Download table as xlsx"
  },
  {
    "objectID": "other_pages/rank.html",
    "href": "other_pages/rank.html",
    "title": "Getting Blue Fingers",
    "section": "",
    "text": "Expected Points Eredivisie 2022/2023\nLeague table sorted on xPoints\n\n\n\nBased on simulating every shot in every match\n\n\n\n\n\n Download table as xlsx"
  },
  {
    "objectID": "Shots.html",
    "href": "Shots.html",
    "title": "Getting Blue Fingers",
    "section": "",
    "text": "Shots and xG Eredivisie 2022/2023\nTable sorted on NP-Goals and NPxG\n\n\n\n\n\n\n\n\n Download table as xlsx"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Welcome!\nMy name is Robin Koetsier. This site serves as a personal site for my data and blog posts.\nI mostly write/visualize stuff about Dutch football. On my Twitter profile you can follow me for visualizations of Eredivisie matches and other stuff. I will update the Eredivisie stats after every matchday. Below you can check all my posts combined. In the menu they are divided by what kind of post it is.\n\n\n\n  \n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nShots on target\n\n\n\n\n\nVisualize where teams shoot on goal!\n\n\n\n\n\n\nOct 10, 2022\n\n\n\n\n\n\n  \n\n\n\n\nPercentile Radars/Pizza’s\n\n\n\n\n\nMake Percentile Pizza charts like The Atletic, mplsoccer or Football Slices!\n\n\n\n\n\n\nApr 27, 2021\n\n\n\n\n\n\n  \n\n\n\n\nExpected Points\n\n\n\n\n\nHow do we calculate xPoints?\n\n\n\n\n\n\nMar 3, 2021\n\n\n\n\n\n\n  \n\n\n\n\nExtraordinary Giakoumakis\n\n\n\n\n\nHow good is Giakoumakis really?\n\n\n\n\n\n\nFeb 4, 2021\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "stuff/twitter/index.html",
    "href": "stuff/twitter/index.html",
    "title": "Twitter",
    "section": "",
    "text": "Besides my personal Twitter profile, I also made a bot to post a dashboard every Eredivisie game. This was mostly to teach myself some more coding. You can see both accounts here."
  },
  {
    "objectID": "stuff/podcasts/index.html",
    "href": "stuff/podcasts/index.html",
    "title": "Podcasts",
    "section": "",
    "text": "All episodes:\n Spotify\n Apple Music\nBesides that, I was also in one episode of the ‘Showkeepers Podcast’ (also in Dutch)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "I do most of my visualisations in R and sometimes in Python. I you have any questions or need some help with these languages, shoot me a message on Twitter.\nThe Eredivisie stats are made with event data. The xG model I made myself using XGBoost in R. My twitterbot @Eredivisieplots is running on a Raspberry Pi 3 and uses Python and R to get the data and make the dashboard.\nI also made a dashboard in Tableau a few season ago to visualize the birth places of player in the Eredivisie and the KKD.\nThose are my skill that are relevant skill for my site."
  },
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nShots on target\n\n\nVisualize where teams shoot on goal!\n\n\n\nOct 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPercentile Radars/Pizza’s\n\n\nMake Percentile Pizza charts like The Atletic, mplsoccer or Football Slices!\n\n\n\nApr 27, 2021\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "rank.html",
    "href": "rank.html",
    "title": "xRank",
    "section": "",
    "text": "Expected Points Eredivisie 2022/2023\nLeague table sorted on xPoints\n\n\n\nBased on simulating every shot in every match"
  },
  {
    "objectID": "Schoten.html",
    "href": "Schoten.html",
    "title": "Getting Blue Fingers",
    "section": "",
    "text": "Shots and xG Eredivisie 2022/2023\nTable sorted on NP-Goals and NPxG\n\n\n\n\n\n\n\n\n Download table as xlsx"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\nHow do we calculate xPoints?\n\n\n\nMar 3, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow good is Giakoumakis really?\n\n\n\nFeb 4, 2021\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tutorials/RadarPizzaChart/index.html",
    "href": "tutorials/RadarPizzaChart/index.html",
    "title": "Percentile Radars/Pizza’s",
    "section": "",
    "text": "Getting and preparing the data\nlibrary(worldfootballR)  #for scraping\nlibrary(tidyverse)       #for ggplot, dplyr and several other stuff\nlibrary(forcats)         #for sorting within ggplot\nlibrary(glue)            #easier than paste()\nI’m using the ‘Spartan’ font in all my plots, but you can use your own ofcourse. The extrafont package has a lot of nice fonts.\nNext we are going to pick a player in which we are interested, as long as it’s from the leagues mentioned earlier. I’m choosing Mateusz Klich, but you can pick someone else, I’m not judging you. As mentioned before, worldfootballR has a function to scrape the scouting report.\nNote: the function was updated to scrape the WHOLE scouting report. So selecting your rows need some more thought. Besides that, it also have a column called ‘StatsGroup’ so you can use this to colour your chart.\ndf <- fb_player_scouting_report(\"https://fbref.com/en/players/282679b4/Mateusz-Klich\")\nhead(df)\nFor some players you need to add\npos_versus = \"primary\"\ninside the function as the player played multiple positions.\n{::options parse_block_html=“true” /}\n\n\nUsing other data\n\nYou can use The full scouting report as well. You only have to make the data frame yourself. A short example how to do this:\ndf_selected<- data.frame(player_name = \"Mateusz Klich\",\n                         Statistic = c(\"Pressures (Att 3rd)\", \n                                       \"% of dribblers tackled\",\n                                       \"Touches (Att 3rd)\",\n                                       \"Carries into Final Third\",\n                                       \"Progressive Passes Rec\",\n                                       \"Crosses\"),\n                         Per90 = c(4.63,\n                                    16,\n                                    26.11,\n                                    2.55,\n                                    7.22,\n                                    1.32),\n                         Percentile = c(92,\n                                        3,\n                                        94,\n                                        93,\n                                        98,\n                                        87),\n                         stat=c(\"Defending\",\n                                \"Defending\",\n                                \"Possession\",\n                                \"Possession\",\n                                \"Possession\",\n                                \"Attacking\"))\nYou can change the stat column to your liking, but you have to change the scale_fill_manuel() later on as well.\n\n{::options parse_block_html=“false” /}\n\nNow we can use this column to color the chart. I’m not interested in every metric though. The ‘npxG+xA’ column for instance. I already have those metrics each in my chart. To pick the metrics you want/don’t want, print the Statistic column and choose.\n{::options parse_block_html=“true” /}\n\n\nSee all statistics\n\nprint(df$Statistic)\n    \n\n{::options parse_block_html=“false” /}\nIf you want to pick your metrics, use the statement below\ndf_selected <- df[c(2,3,9,10,13,28,29,47,73,107,109,116,118,126,148),]\nTo colour them by type of the Statistic, we make a new column and fill it with “Attacking”, “Possession” or “Defending”. You can use the StatGroup column that is already provided as well, but this tutorial was made before you could scrape the whole scouting report. This is also the reason the Statistics look random. Just change it to match your data frame.\ndf_selected <- df_selected %>% \n      mutate(stat=case_when(Statistic == \"Non-Penalty Goals\"|\n                            Statistic == \"npxG\"|\n                            Statistic == \"Shots Total\"|\n                            Statistic == \"Assists\"|\n                            Statistic == \"xA\"|\n                            Statistic == \"npxG+xA\"|\n                            Statistic == \"Shot-Creating Actions\" ~ \"Attacking\",\n                            Statistic == \"Passes Attempted\"|\n                            Statistic == \"Pass Completion %\"|\n                            Statistic == \"Progressive Passes\"|\n                            Statistic == \"Progressive Carries\"|\n                            Statistic == \"Dribbles Completed\"|\n                            Statistic == \"Touches (Att Pen)\"|\n                            Statistic == \"Progressive Passes Rec\" ~ \"Possession\",\n                                 TRUE ~ \"Defending\"))\n\n\nMaking the chart\nTo make the pizza chart, we will use geom_bar() with coord_polar(). It’s a neat little trick as there isn’t a good package to do it otherwise.\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                       #select the columns to plot and sort it so the types of metric are grouped\n  geom_bar(aes(y=100,fill=stat),stat=\"identity\",width=1,colour=\"white\",                 #make the whole pizza first\n  alpha=0.5) +                                                                          #change alphe to make it more or less visible\n  geom_bar(stat=\"identity\",width=1,aes(fill=stat),colour=\"white\") +                     #insert the values \n  coord_polar() +                                                                       #make it round\n  geom_label(aes(label=Per90,fill=stat),size=2,color=\"white\",show.legend = FALSE)+     #add a label for the value. Change 'label=Per.90' to 'label=Percentile' to show the percentiles\n scale_fill_manual(values=c(\"Possession\" = \"#D70232\",                                   #choose colors to fill the pizza parts\n                             \"Attacking\" = \"#1A78CF\",\n                             \"Defending\" = \"#FF9300\")) +                                                              \n  scale_y_continuous(limits = c(-10,100))+                                              #create the white part in the middle.   \n  labs(fill=\"\",                                                                         #remove legend title\n       caption = \"Data from StatsBomb via FBref\",                                       #credit FBref/StatsBomb\n       title=df_selected$Player[1])+                                                    #let the title be te name of the player\n \n  theme_minimal() +                                                                     #from here it's only themeing. \n  theme(legend.position = \"top\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        text = element_text(family=\"Spartan-Light\"),                                    #I downloaded this font from Google Fonts. You can use your own font of course\n        plot.title = element_text(hjust=0.5),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank()) \n\n  \n\nDoesn’t look half bad, but the labels are horrible. Besides that we should add some extra information about the player. The labels need to be rotated so they look better. We can do this by hand, but if we change the number of metrics we’re using we need to do it all over again. So let’s just make a calculation that we can run everytime we make a new chart. I chose to display the ‘Per 90’ stats insteadd of the percentiles. You can change this in geom_label().\ntemp <- (360/(nrow(df_selected))/2)                             #find the difference in angle between to labels and divide by two.\nmyAng <- seq(-temp, -360+temp, length.out = nrow(df_selected))  #get the angle for every label\nang<-ifelse(myAng < -90, myAng+180, myAng)                                    #rotate label by 180 in some places for readability\nang<-ifelse(ang < -90, ang+180, ang)                                          #rotate some lables back for readability...\nBecause some labels are rather long (‘Progressive Passes Rec’ for instance) I decided to let every word start on a new line. I used gsub for that\ndf_selected$Statistic <- gsub(\" \",\"\\n\",df_selected$Statistic)\nIf we plot again and add an extra line we will get a better plot.\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                       #select the columns to plot and sort it so the types of metric are grouped\n  geom_bar(aes(y=100,fill=stat),stat=\"identity\",width=1,colour=\"white\",                 #make the whole pizza first\n  alpha=0.5) +                                                                          #change alphe to make it more or less visible\n  geom_bar(stat=\"identity\",width=1,aes(fill=stat),colour=\"white\") +                     #insert the values \n  coord_polar() +                                                                       #make it round\n  geom_label(aes(label=Per90,fill=stat),size=2,color=\"white\",show.legend = FALSE)+     #add a label for the value. Change 'label=Per.90' to 'label=Percentile' to show the percentiles\n scale_fill_manual(values=c(\"Possession\" = \"#D70232\",                                   #choose colors to fill the pizza parts\n                             \"Attacking\" = \"#1A78CF\",\n                             \"Defending\" = \"#FF9300\")) +                                                              \n  scale_y_continuous(limits = c(-10,100))+                                              #create the white part in the middle.   \n  labs(fill=\"\",                                                                         #remove legend title\n       caption = \"Data from StatsBomb via FBref\",                                       #credit FBref/StatsBomb\n       title=df_selected$Player[1])+                                                    #let the title be te name of the player\n \n  theme_minimal() +                                                                     #from here it's only themeing. \n  theme(legend.position = \"top\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 6, angle = ang),\n        text = element_text(family=\"Spartan-Light\"),                                    #I downloaded this font from Google Fonts. You can use your own font of course\n        plot.title = element_text(hjust=0.5),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank()) \n\n  \n\nThat looks much better! From here you can change everything you want. I’m going to add a subtitle, and make some theme adjustments. Adding a picture is something I will add to this tutorial in the future.\n\n  \n\n{::options parse_block_html=“true” /}\n\n\nLet’s see de final code!\n\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                       #select the columns to plot and sort it so the types of metric are grouped\n  geom_bar(aes(y=100,fill=stat),stat=\"identity\",width=1,colour=\"white\",                 #make the whole pizza first\n  alpha=0.5) +                                                                          #change alphe to make it more or less visible\n  geom_bar(stat=\"identity\",width=1,aes(fill=stat),colour=\"white\") +                     #insert the values \n  coord_polar() +                                                                       #make it round\n  geom_label(aes(label=Per90,fill=stat),size=2,color=\"white\",show.legend = FALSE)+      #add a label for the value. Change 'label=Per.90' to 'label=Percentile' to show the percentiles\n scale_fill_manual(values=c(\"Possession\" = \"#D70232\",                                   #choose colors to fill the pizza parts\n                             \"Attacking\" = \"#1A78CF\",\n                             \"Defending\" = \"#FF9300\")) +                                                              \n  scale_y_continuous(limits = c(-10,100))+                                              #create the white part in the middle.   \n  labs(fill=\"\",   \n       caption = \"Data from StatsBomb via FBref\",     \n       #remove legend title\n       title=glue(\"{df_selected$Player[1]} | Leeds United\"),\n        subtitle = glue::glue(\"{df_selected$season} | Compared to midfielders Top 5 competitions | stats per 90\"))+ #let the title be te name of the player                                                \n \n  theme_minimal() +                                                                     #from here it's only themeing. \n  theme(plot.background = element_rect(fill = \"#F2F4F5\",color = \"#F2F4F5\"),\n        panel.background = element_rect(fill = \"#F2F4F5\",color = \"#F2F4F5\"),\n        legend.position = \"top\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n         axis.text.x = element_text(size = 6, angle = ang),\n        text = element_text(family=\"Spartan-Light\"),                                    #I downloaded this font from Google Fonts. You can use your own font of course\n        plot.title = element_markdown(hjust=0.5,family=\"Spartan-Medium\"),\n        plot.subtitle = element_text(hjust=0.5,size=8),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        plot.margin = margin(5,2,2,2)) \nNot too hard to do, right?\n\n\n{::options parse_block_html=“false” /}\nNote: with coord_polar() in combination with a background colour, I need to trim the image afterwards. I do this with a commandline (on mac OSX) statement in my R session:\nsystem(\"convert -trim image.png new_image.png\")\nWhere image.png is my just saved image and new_image.png will be the trimmed one. There is also an option to add the color to ggsave:\nggsave(\"image.png\",bg=\"#F2F4F5\")\nYou can add the resolution to ggsave() if the quality is poor.\nI prefer to trim it, as it removes unnecessary parts from the plot.\n\n\nSome other (well known) styles\nSome examples, with some well known styles included. Just a head start to create your own style and learn about how the different elements of ggplot work. Play around with colours/fonts/grid lines etc. to create something unique!\n\nThe Athletic/ Tom Worville\n\n  \n\n{::options parse_block_html=“true” /}\n\n\nThe code\n\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                       \n  geom_bar(aes(y=100),fill=\"#131313\",stat=\"identity\",width=1,colour=\"#797979\",                 \n  alpha=0.5,show.legend = FALSE) +      \n  \n  \n  geom_bar(stat=\"identity\",width=1,aes(fill=stat),colour=\"#F3FEFC\",alpha=1) +                     \n  coord_polar(clip = \"off\") +                                                                      \n     geom_hline(yintercept=25, colour=\"#565656\",linetype=\"longdash\",alpha=0.5)+\n  geom_hline(yintercept=50, colour=\"#565656\",linetype=\"longdash\",alpha=0.5)+\n  geom_hline(yintercept=75, colour=\"#565656\",linetype=\"longdash\",alpha=0.5)+ \n scale_fill_manual(values=c(\"Possession\" = \"#1ADA89\",                                   \n                             \"Attacking\" = \"#0F70BF\",\n                             \"Defending\" = \"#EC313A\")) +                                                        \n   geom_label(aes(label=Percentile,fill=stat),size=2,color=\"white\",show.legend = FALSE)+ \n  scale_y_continuous(limits = c(-20,100))+                                              \n  labs(fill=\"\",   \n       caption = \"Data from StatsBomb via FBref\\nStyle copied from The Athletic/@worville\",     \n       #remove legend title\n       title=glue(\"{df_selected$Player[1]} | Leeds United\"),\n        subtitle = glue::glue(\"{df_selected$season} | Compared to midfielders Top 5 competitions | stats per 90\"))+                                                \n  theme_minimal() +                                                                     \n  theme(plot.background = element_rect(fill = \"#131313\",color = \"#131313\"),\n        panel.background = element_rect(fill = \"#131313\",color = \"#131313\"),\n        legend.position = \"bottom\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 6,colour = \"#FFFFFF\"),\n        text = element_text(family=\"Spartan-Light\",colour= \"#FEFEFE\"),                                   \n        plot.title = element_markdown(hjust=0.5,family=\"Spartan-Medium\"),\n        plot.subtitle = element_text(hjust=0.5,size=8),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        plot.margin = margin(5,4,2,4)) \n\n\n{::options parse_block_html=“false” /}\n\n\nFootball Slices\n\n  \n\n{::options parse_block_html=“true” /}\n\n\nThe code\n\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                      \n  geom_bar(aes(y=100),fill=\"#FAFBFD\",stat=\"identity\",width=1,colour=\"black\",                 \n  alpha=0.5) +                                                                          \n  geom_bar(stat=\"identity\",width=0.95,aes(fill=stat),colour=NA) +                    \n  coord_polar(clip = \"off\") +                                                                       \n \n   geom_hline(yintercept=25, colour=\"#CFD0D2\",alpha=1,size=0.1)+\n  geom_hline(yintercept=50, colour=\"#CFD0D2\",alpha=1,size=0.1)+\n  geom_hline(yintercept=75, colour=\"#CFD0D2\",alpha=1,size=0.1)+ \n   geom_text(aes(label=Per90,fill=stat),size=2,color=\"black\",show.legend = FALSE)+  \n scale_fill_manual(values=c(\"Possession\" = \"#F47294\",                                   \n                             \"Attacking\" = \"#E7D96E\",\n                             \"Defending\" = \"#8FBFEF\")) +                                                              \n  scale_y_continuous(limits = c(-10,110))+                                             \n  labs(fill=\"\",   \n       caption = \"Data from StatsBomb via FBref\\nStyle copied from @FootballSlices\",     \n       #remove legend title\n       title=glue(\"{df_selected$Player[1]} | Leeds United\"),\n        subtitle = glue::glue(\"{df_selected$season} | Compared to midfielders Top 5 competitions | stats per 90\"))+                                               \n  theme_minimal() +                                                                  \n  theme(plot.background = element_rect(fill = \"#FAFBFD\",color = \"#FAFBFD\"),\n        panel.background = element_rect(fill = \"#FAFBFD\",color = \"#FAFBFD\"),\n        legend.position = \"top\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n         axis.text.x = element_text(size = 6),\n        text = element_text(family=\"Spartan-Light\"),                                    \n        plot.title = element_markdown(hjust=0.5,family=\"Spartan-Medium\"),\n        plot.subtitle = element_text(hjust=0.5,size=8),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        plot.margin = margin(5,2,2,2)) \n\n\n{::options parse_block_html=“false” /}\n\n\nOne with no background\n\n  \n\n{::options parse_block_html=“true” /}\n\n\nThe code\n\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                      \n  geom_bar(aes(y=100),fill=\"#F2F4F5\",stat=\"identity\",width=1,colour=\"white\",                \n           alpha=1,linetype=\"dashed\") +                                                                          \n  geom_bar(stat=\"identity\",width=1,fill=\"#D20222\",colour=\"white\") +   \n  geom_hline(yintercept=25, colour=\"white\",linetype=\"longdash\",alpha=0.5)+\n  geom_hline(yintercept=50, colour=\"white\",linetype=\"longdash\",alpha=0.5)+\n  geom_hline(yintercept=75, colour=\"white\",linetype=\"longdash\",alpha=0.5)+ \n  geom_hline(yintercept=100, colour=\"white\",alpha=0.5)+ \n  coord_polar() +                                                                     \n  geom_label(aes(label=Per90),fill=\"#D20222\",size=2,color=\"white\",show.legend = FALSE)+     \n  scale_fill_manual(values=c(\"Possession\" = \"#D70232\",                                  \n                             \"Attacking\" = \"#1A78CF\",\n                             \"Defending\" = \"#FF9300\")) +                                                              \n  scale_y_continuous(limits = c(-10,100))+                                              \n  labs(fill=\"\",   \n       caption = \"Data from StatsBomb via FBref\",     \n       #remove legend title\n       title=glue(\"{df_selected$Player[1]} | Manchester United\"),\n       subtitle = glue::glue(\"{df_selected$season} | Compared to midfielders Top 5 competitions | stats per 90\"))+                                               \n  \n  theme_minimal() +                                                                     \n  theme(plot.background = element_rect(fill = \"#F2F4F5\",color = \"#F2F4F5\"),\n        panel.background = element_rect(fill = \"#F2F4F5\",color = \"#F2F4F5\"),\n        legend.position = \"top\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 6, angle = ang),\n        text = element_text(family=\"Spartan-Light\"),                                    \n        plot.title = element_markdown(hjust=0.5,family=\"Spartan-Medium\"),\n        plot.subtitle = element_text(hjust=0.5,size=8),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        plot.margin = margin(5,2,2,2)) \n\n\n{::options parse_block_html=“false” /}\n\n\nOne with other labels and background colour\n\n  \n\n{::options parse_block_html=“true” /}\n\n\nThe code\n\nlabel_data <- df_selected\n\n# calculate the ANGLE of the labels\nnumber_of_bar <- nrow(label_data)\nlabel_data$id <- seq(1,length(label_data$player_name))\nangle <-  90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)\n\n# calculate the alignment of labels: right or left\n# If I am on the left part of the plot, my labels have currently an angle < -90\nlabel_data$hjust<-ifelse( angle < -90, 1, 0)\n\n# flip angle BY to make them readable\nlabel_data$angle<-ifelse(angle < -90, angle+180, angle)\n\n\n\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                      \n  geom_bar(aes(y=100),fill=\"#0066B2\",stat=\"identity\",width=1,colour=\"#0066B2\",                \n           alpha=0.4,linetype=\"dashed\") +                                                                          \n  geom_bar(stat=\"identity\",width=1,fill=\"#CC0033\",colour=\"white\") +   \n  geom_hline(yintercept=25, colour=\"white\",linetype=\"longdash\",alpha=0.5)+\n  geom_hline(yintercept=50, colour=\"white\",linetype=\"longdash\",alpha=0.5)+\n  geom_hline(yintercept=75, colour=\"white\",linetype=\"longdash\",alpha=0.5)+ \n  geom_hline(yintercept=100, colour=\"white\",alpha=0.5)+ \n  coord_polar() +                                                                     \n  geom_label(aes(label=Per90),fill=\"#CC0033\",size=2,color=\"white\",show.legend = FALSE,family=\"Spartan-Bold\")+     \n  scale_fill_manual(values=c(\"Possession\" = \"#D70232\",                                  \n                             \"Attacking\" = \"#1A78CF\",\n                             \"Defending\" = \"#FF9300\")) +                                                              \n  scale_y_continuous(limits = c(-10,110))+                                              \n  labs(fill=\"\",   \n       caption = \"Data from StatsBomb via FBref\",     \n       #remove legend title\n       title=glue(\"{df_selected$Player[1]} | Bayern Munich\"),\n       subtitle = glue::glue(\"{df_selected$season} | Compared to attackers Top 5 competitions | stats per 90\"))+                                               \n  geom_text(data=label_data, aes(x=id, y=100+10, label=Statistic, hjust=hjust), \n      color=\"#0066B2\", fontface=\"bold\",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE )  +\n  theme_minimal() +                                                                     \n  theme(plot.background = element_rect(fill = \"#F2F4F5\",color = \"#F2F4F5\"),\n        panel.background = element_rect(fill = \"#F2F4F5\",color = \"#F2F4F5\"),\n        legend.position = \"top\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n       # axis.text.x = element_text(size = 6, angle = ang),\n        axis.text.x = element_blank(),\n        text = element_text(family=\"Spartan-Light\"),                                    \n        plot.title = element_markdown(hjust=0.5,family=\"Spartan-Medium\"),\n        plot.subtitle = element_text(hjust=0.5,size=8),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        plot.margin = margin(5,2,2,2)) \n\n\n{::options parse_block_html=“false” /}\nIf you have any questions, contact me on Twitter. and please tag me if you make a chart yourself! Love to see what people make of it."
  },
  {
    "objectID": "tutorials/2022-10-10_shot-areas/index.html",
    "href": "tutorials/2022-10-10_shot-areas/index.html",
    "title": "Shots on target",
    "section": "",
    "text": "PREPARE ENVIRONMENT\nOf course you need the packages. For packages of which I use more than one function, I like to load them. For other uses, just using package::function() is good enough. You will see me use it later on.\nlibrary(worldfootballR) \nlibrary(tidyverse)\n\n\nGET AND PREPARE DATA\nWe want the match data from FotMob for all the Eredivisie matches played this season. To know which matches to scrape, we can use the following code.\nleague_matches <- fotmob_get_league_matches(\n  country =     \"NED\",\n  league_name = \"Eredivisie\"\n) %>%\nfilter(league_matches$status$reason$short == \"FT\") # only select the matches that are already played.\nNow we can feed the match id’s from this data frame to the next function. It will collect all the data from these matches, so it can take some time.\nmatch_details <- fotmob_get_match_details(league_matches$id)\nIn this data frame, there is a column called ‘shots’. This has all the shots from that match in it with all the relevant data. To make live easier, you can unnest that column so you have a bigger data frame with every shot in there.\nshots_temp <- match_details %>%\n  unnest(shots)\nIn the next step we are going to filter the data so we only have the shots on target that are not blocked. I do this by looking at the ‘expected_goals_on_target’ column. In the same pipe we are adding the name of the team that takes the shot. I recommend this way over an ifelse() statement as it is easier to add more conditions in the future. If you want, you can filter the data so it only has shots from open play or just no penalties.\nshots_df <- shots_temp %>%\n  mutate(expected_goals_on_target = replace_na(expected_goals_on_target,0)) %>%\n  filter(expected_goals_on_target>0) %>%\n  mutate(team_name = \n                  case_when(\n                          away_team_id == team_id ~ away_team,\n                          TRUE ~ home_team\n                  ))\n\n\nPLOTTING\nNow we can start to plot. From past visualizations I made, I know the coordinates of the goal. The bottom left corner is (0,0) and the top right corner is (2,0.6367725). I decided to make 12 areas, so we have to devide those numbers bij 4 and 3. Let’s plot the whole league first to get a feeling for how it will look.\nshots_df %>%\n  ggplot(aes(on_goal_shot$x,on_goal_shot$y))+\n  stat_bin_2d(aes(on_goal_shot$x,on_goal_shot$y,fill=..count..),\n              binwidth = c(0.5, (0.6367725/3)),                     \n              drop=FALSE) \n\nLooks horrible, but the idea is clear. The most shots go to the area on the bottom, just right of the middle. To sort this by team, we can use a simple facet_wrap as you can see below.\nshots_df %>%\n  ggplot(aes(on_goal_shot$x,on_goal_shot$y))+\n  stat_bin_2d(aes(on_goal_shot$x,on_goal_shot$y,fill=..count..),\n              binwidth = c(0.5, (0.6367725/3)),\n              drop=FALSE)+\n  facet_wrap(~team_name)\n\nNow we’re getting somewhere! I really prefer to see how the areas correspond with each other per team though. So I’m going to add some code to print the percentage of shots in each area per team. This prints a text with the percentage in every area and the ..PANEL.. parts make sure it is the percentage per team and not per competition.\nshots_df %>%\n  ggplot(aes(on_goal_shot$x,on_goal_shot$y))+\n  stat_bin_2d(aes(on_goal_shot$x,on_goal_shot$y,fill=..count..),\n              binwidth = c(0.5, (0.6367725/3)),\n              drop=FALSE)+\n  stat_bin_2d(geom = \"text\", \n  aes(\n    label=paste0((100*(round((..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..],2))),\"%\")),\n  binwidth = c(0.5, (0.6367725/3)))+\n  facet_wrap(~team_name)\n\nWhen saved in the right ratio, it already looks okay(ish).\nThe next step is to make is look way better than it does.\n\n\nTHEMING THE PLOT\nThe things we want to do:\n\nDraw a goal\nchange font\nremove legend\nremove axis ticks/names/numbers\nmake it pretty\n\nshots_df %>%\n  ggplot(aes(on_goal_shot$x,on_goal_shot$y))+\n  stat_bin_2d(aes(on_goal_shot$x,on_goal_shot$y,fill=..count..),\n              binwidth = c(0.5, (0.6367725/3)),\n              drop=FALSE)+\n  stat_bin_2d(geom = \"text\", size=3,colour=\"white\",\n              aes(\n                label=paste0((100*(round((..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..],2))),\"%\")\n                \n              ), \n              \n              binwidth = c(0.5, (0.6367725/3)))+\n  #facet_wrap(~team_name)+\n  geom_segment(aes(x=0,xend=0,y=0,yend=0.66534392-0.028571429),colour=\"white\")+ #drawing a goal\n  geom_segment(aes(x=0-0.028571429,xend=0-0.028571429,y=0,yend=0.66534392),colour=\"white\")+ \n  geom_segment(aes(x=2,xend=2,y=0,yend=0.66534392-0.028571429),colour=\"white\")+\n  geom_segment(aes(x=2+0.028571429,xend=2+0.028571429,y=0,yend=0.66534392 ),colour=\"white\")+\n  geom_segment(aes(x=0,xend=2,y=0.66534392-0.028571429,yend=0.66534392-0.028571429),colour=\"white\")+\n  geom_segment(aes(x=0-0.028571429,xend=2+0.028571429,y=0.66534392,yend=0.66534392),colour=\"white\")+\n  scale_fill_gradient(low = \"#120E41\", high = \"#E172A8\")+ \n  labs(title= \"Where do the Eredivisie teams shoot on goal?\",\n       subtitle = \"Percentage of shots per area\",\n       caption = \"Data: Opta via FotMob\\n@RobinWilhelmus\")+\n  theme(plot.background = element_rect(fill = \"#120E41\", colour = \"#120E41\"),\n        panel.background = element_rect(fill = \"#120E41\", colour = \"#120E41\"),\n        legend.position = \"none\",\n        panel.grid = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text = element_blank(),\n        axis.title = element_blank(),\n        strip.background = element_rect(fill=\"#69C5D2\"),\n        strip.text = element_text(family = \"Spartan-Medium\", color= \"#120E41\"),\n        plot.title = element_text(family = \"Spartan-Bold\", colour=\"#69C5D2\",size=18),\n        plot.subtitle = element_text(family = \"Spartan-Bold\", colour=\"#69C5D2\",size=14),\n        plot.caption = element_text(family = \"Spartan-Light\", colour=\"#69C5D2\",size=10))\n  \n\nWell, this looks nice. At first I was really happy with this plot, but it bothers me that the 18% in PSV’s plot is more highlighted than the 21% for NEC Nijmegen. This is because the colours are the absolute values and the labels are per club. I looked for a way to change this and still using facet_wrap() but couldn’t find a way. I do however found another way. It’s a bit harder, but I will guide you through it.\n\n\nA BETTER WAY\nTo make the plot the way I decribe above, we need to use {patchwork}. To make it easy for ourselves. We will first create a function of the above plot. We change some things, because the function will output 18 different plots. One for each club. So we need to set the title for each club. Let’s take a look. The reason I do it this way is to avoid an if-loop. You can totally do it that way, but I learned to avoid them if possible.\nplot_func <- function(df, name) {\ndf %>%\n    \n    ggplot(aes(on_goal_shot$x,on_goal_shot$y))+\n    stat_bin_2d(aes(on_goal_shot$x,on_goal_shot$y,fill=..count..),\n                binwidth = c(0.5, (0.6367725/3)), colour=\"white\",linetype=\"dashed\",\n                drop=FALSE)+\n    stat_bin_2d(geom = \"text\", size=3,colour=\"white\",\n                aes(\n                  label=paste0((100*(round((..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..],2))),\"%\")\n                  \n                ), \n                \n                binwidth = c(0.5, (0.6367725/3)))+\n    #facet_wrap(~team_name)+\n    geom_segment(aes(x=0,xend=0,y=0,yend=0.66534392-0.028571429),colour=\"white\")+ #drawing a goal\n    geom_segment(aes(x=0-0.028571429,xend=0-0.028571429,y=0,yend=0.66534392),colour=\"white\")+ \n    geom_segment(aes(x=2,xend=2,y=0,yend=0.66534392-0.028571429),colour=\"white\")+\n    geom_segment(aes(x=2+0.028571429,xend=2+0.028571429,y=0,yend=0.66534392 ),colour=\"white\")+\n    geom_segment(aes(x=0,xend=2,y=0.66534392-0.028571429,yend=0.66534392-0.028571429),colour=\"white\")+\n    geom_segment(aes(x=0-0.028571429,xend=2+0.028571429,y=0.66534392,yend=0.66534392),colour=\"white\")+\n    scale_fill_gradient(low = \"#120E41\", high = \"#E172A8\")+ \n    labs(title= glue::glue(\"{name}\")\n         #subtitle = \"Percentage of shots per area\",\n         #caption = \"Data: Opta via FotMob\\n@RobinWilhelmus\"\n         )+\n    theme(plot.background = element_rect(fill = \"#120E41\", colour = \"#120E41\"),\n          panel.background = element_rect(fill = \"#120E41\", colour = \"#120E41\"),\n          legend.position = \"none\",\n          panel.grid = element_blank(),\n          axis.ticks = element_blank(),\n          axis.text = element_blank(),\n          axis.title = element_blank(),\n          strip.background = element_rect(fill=\"#69C5D2\"),\n          strip.text = element_text(family = \"Spartan-Medium\", color= \"#120E41\"),\n          plot.title = element_text(family = \"Spartan-Bold\", colour=\"#69C5D2\",size=8,hjust=.5),\n          plot.subtitle = element_text(family = \"Spartan-Bold\", colour=\"#69C5D2\",size=4),\n          plot.caption = element_text(family = \"Spartan-Light\", colour=\"#69C5D2\",size=3))\n}\nSo in the title of the plot, I put the team name with glue::glue(). You may have to install this package. Of course you can add more stuff to the plot, like the team loge or the number of shots. Go wild!\nNow make the plots\nnested_tmp <- shots_df %>% \n  group_by(team_name) %>% \n  nest() %>% \n  arrange(team_name) %>%\n  mutate(plots = map2(data, team_name, plot_func)) \nAnd now use {patchwork} to wrap the plots together. If you’re not familiar with this packages, read the documentation. It is from the same maker as {ggplot} and therefore works great with it.\nlibrary(patchwork) # we use it multiple times in this piece of code\nwrap_plots(nested_tmp$plots)+ #gather all the plots \n  plot_annotation(\n  title = 'Where do the Eredivisie teams shoot on goal?',\n  subtitle = 'Percentage of shots per area',\n  caption = 'Data: Opta via FotMob\\n@RobinWilhelmus'\n) &\n    plot_annotation(theme = \n  theme(plot.background = element_rect(fill=\"#120E41\",colour = \"#120E41\"),\n        plot.title = element_text(family = \"Spartan-Bold\", colour=\"#69C5D2\",size=18),\n        plot.subtitle = element_text(family = \"Spartan-Bold\", colour=\"#69C5D2\",size=14),\n        plot.caption = element_text(family = \"Spartan-Light\", colour=\"#69C5D2\",size=10)))\n\nAnd as you can see, now the area with the most shots per team is highlighted. It took some extra step, but it was worth it.\nIf you have any questions or want to see a tutorial about a viz you saw online, send me a message on Twitter. And tag me if you make one in your own style and post it to Twitter!"
  },
  {
    "objectID": "passes.html",
    "href": "passes.html",
    "title": "Passes",
    "section": "",
    "text": "Assists, xT and xA Eredivisie 2022/2023\nTable sorted on Assists and xA"
  },
  {
    "objectID": "dia.html",
    "href": "dia.html",
    "title": "Test",
    "section": "",
    "text": "Turn off alarm\nGet out of bed\n\n\n\n\n\nEat eggs\nDrink coffee"
  },
  {
    "objectID": "dia.html#dinner",
    "href": "dia.html#dinner",
    "title": "Test",
    "section": "Dinner",
    "text": "Dinner\n\nEat spaghetti\nDrink wine"
  },
  {
    "objectID": "dia.html#going-to-sleep",
    "href": "dia.html#going-to-sleep",
    "title": "Test",
    "section": "Going to sleep",
    "text": "Going to sleep\n\nGet in bed\nCount sheep"
  },
  {
    "objectID": "Work.html",
    "href": "Work.html",
    "title": "Work",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nNo matching items"
  }
]